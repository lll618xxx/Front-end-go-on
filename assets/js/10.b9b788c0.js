(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{288:function(t,e,a){t.exports=a.p+"assets/img/tcp.fd7e0caa.png"},289:function(t,e,a){t.exports=a.p+"assets/img/attachment.f93aeed6.jpg"},290:function(t,e,a){t.exports=a.p+"assets/img/daili_1.ba5f1ea4.png"},291:function(t,e,a){t.exports=a.p+"assets/img/daili_2.d002928b.png"},358:function(t,e,a){"use strict";a.r(e);var s=a(13),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"_1-http-协议介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-http-协议介绍"}},[t._v("#")]),t._v(" 1. HTTP 协议介绍")]),t._v(" "),e("p",[t._v("HTTP 协议是超文本传输协议，属于应用层协议，基于 TCP/IP 通信协议来传递数据，是无状态的协议。"),e("br"),t._v("\nHTTP 报文由起始行，首部以及数据主体三个部分")]),t._v(" "),e("h4",{attrs:{id:"http-请求方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-请求方法"}},[t._v("#")]),t._v(" HTTP 请求方法")]),t._v(" "),e("p",[t._v("GET： 请求指定的页面信息，并返回实体主体"),e("br"),t._v("\nHEAD:： 类似于 get 请求，返回的内容不包含实体部分，用于获取报头"),e("br"),t._v("\nPOST： 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）"),e("br"),t._v("\nPUT： 从客户端向服务器传送的数据取代指定的文档的内容"),e("br"),t._v("\nDELETE： 请求服务器删除指定的页面"),e("br"),t._v("\nOPTIONS：允许客户端查看服务器的性能。询问支持请求的方法"),e("br"),t._v("\nTRACE： 将服务器收到的请求回送到客户端，主要用于测试或诊断。")]),t._v(" "),e("h2",{attrs:{id:"_2-tcp-ip-协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-tcp-ip-协议"}},[t._v("#")]),t._v(" 2. TCP/IP 协议")]),t._v(" "),e("ul",[e("li",[t._v("TCP/IP 协议族是由一个四层协议组成的系统，这四层分别为：应用层、传输层、网络层和数据链路层")])]),t._v(" "),e("p",[t._v("应用层： 一般是我们编写的应用程序，其决定了向用户提供的应用服务。（如 FTP、HTTP、DNS)等"),e("br"),t._v("\n传输层： 通过系统调用向应用层提供处于网络连接中的两台计算机之间的数据传输功能。（如 TCP、UDP）")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[e("strong",[t._v("udp 和 tcp 的区别")]),e("br"),t._v("\n1、TCP 是面向连接;UDP 是无连接的"),e("br"),t._v("\n2、TCP 提供可靠的服务(三次握手)，而 UDP 尽最大努力交付,TCP 不会出现丢包并且能够保证数据的顺序"),e("br"),t._v("\n3、TCP 传输的速度比 UDP 慢"),e("br"),t._v("\n4、TCP 适用于传输大量数据，而 UDP 适用于传输少量数据")])]),t._v(" "),e("h2",{attrs:{id:"_3-tcp三次握手-建立连接-​"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-tcp三次握手-建立连接-​"}},[t._v("#")]),t._v(" 3. TCP三次握手（建立连接）​")]),t._v(" "),e("p",[t._v("目的​​：确保客户端和服务端双方的发送和接收能力正常。")]),t._v(" "),e("h4",{attrs:{id:"流程​​"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流程​​"}},[t._v("#")]),t._v(" 流程​​：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("​第一次握手（SYN=1, seq=x）​​")]),t._v(" "),e("ul",[e("li",[t._v("客户端发送 SYN 报文（同步序列号），并随机生成初始序列号 seq=x，进入 SYN_SENT 状态。")]),t._v(" "),e("li",[e("strong",[t._v("​作用​​：服务端确认客户端的发送能力正常。")])])])]),t._v(" "),e("li",[e("p",[t._v("第二次握手（SYN=1, ACK=1, seq=y, ack=x+1）​​")]),t._v(" "),e("ul",[e("li",[t._v("服务端收到 SYN 后，返回 SYN+ACK 报文，随机生成自己的序列号 seq=y，并确认客户端的序列号 ack=x+1，进入 SYN_RCVD 状态。")]),t._v(" "),e("li",[e("strong",[t._v("​作用​​：客户端确认服务端的接收和发送能力正常。")])])])]),t._v(" "),e("li",[e("p",[t._v("第三次握手（ACK=1, seq=x+1, ack=y+1）​​")]),t._v(" "),e("ul",[e("li",[t._v("客户端收到 SYN+ACK 后，发送 ACK 报文确认，序列号为 seq=x+1，确认号为 ack=y+1，进入 ESTABLISHED 状态。")]),t._v(" "),e("li",[t._v("服务端收到 ACK 后也进入 ESTABLISHED 状态。")]),t._v(" "),e("li",[t._v("​"),e("strong",[t._v("​作用​​：服务端确认客户端的接收能力正常。")])])])])]),t._v(" "),e("img",{attrs:{src:a(288)}}),t._v(" "),e("ul",[e("li",[t._v("TCP flag表示TCP标志位，主要介绍两个ACK和SYN：\n"),e("ul",[e("li",[t._v("SYN同步序号，用于建立连接过程。")]),t._v(" "),e("li",[t._v("ACK确认序号标识，标识表示发送信息已确认接收。")])])])]),t._v(" "),e("h4",{attrs:{id:"为啥-tcp-需要三次握手-不是两次-四次"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为啥-tcp-需要三次握手-不是两次-四次"}},[t._v("#")]),t._v(" 为啥 TCP 需要三次握手，不是两次，四次？")]),t._v(" "),e("p",[t._v("TCP三次握手是为了确认双方的序列号，这就像一个发送—应答机制，客户端发序列号，服务端返回确认号，此时确认了客户端的序列号。")]),t._v(" "),e("p",[t._v("如果是两次握手，只能确认客户端的序列号，无法确认服务端的序列号。三次握手是确认两个序列号最小的连接次数。\n四次也可以，但是没有必要，需要减少握手的次数，加快连接速度。")]),t._v(" "),e("h2",{attrs:{id:"_4-tcp-四次挥手-断开连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-tcp-四次挥手-断开连接"}},[t._v("#")]),t._v(" 4. TCP 四次挥手（断开连接）")]),t._v(" "),e("p",[t._v("​目的​​：双方安全关闭连接，确保数据完整传输。")]),t._v(" "),e("h4",{attrs:{id:"​流程​​"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#​流程​​"}},[t._v("#")]),t._v(" ​流程​​：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("​第一次挥手（FIN=1, seq=u）​​")]),t._v(" "),e("ul",[e("li",[t._v("主动关闭方（客户端）发送 FIN 报文，序列号为 seq=u，进入 FIN_WAIT_1 状态。")]),t._v(" "),e("li",[e("strong",[t._v("​作用​​：通知服务端“客户端不再发送数据”。")])])])]),t._v(" "),e("li",[e("p",[t._v("​​第二次挥手（ACK=1, ack=u+1）​​")]),t._v(" "),e("ul",[e("li",[t._v("服务端收到 FIN 后，返回 ACK 报文，确认号为 ack=u+1，进入 CLOSE_WAIT 状态。")]),t._v(" "),e("li",[t._v("客户端收到 ACK 后进入 FIN_WAIT_2 状态。")]),t._v(" "),e("li",[e("strong",[t._v("​作用​​：服务端确认收到关闭请求，但可能还有数据未发送完。")])])])]),t._v(" "),e("li",[e("p",[t._v("​第三次挥手（FIN=1, ACK=1, seq=v, ack=u+1）​​")]),t._v(" "),e("ul",[e("li",[t._v("服务端完成剩余数据发送后，发送 FIN+ACK 报文，序列号为 seq=v，进入 LAST_ACK 状态。")]),t._v(" "),e("li",[e("strong",[t._v("作用​​：通知客户端“服务端也准备关闭”。")]),t._v("\n​")])])]),t._v(" "),e("li",[e("p",[t._v("​第四次挥手（ACK=1, ack=v+1）​​")]),t._v(" "),e("ul",[e("li",[t._v("客户端收到 FIN 后，发送 ACK 报文，确认号为 ack=v+1，进入 TIME_WAIT 状态（等待 2MSL 后关闭）。")]),t._v(" "),e("li",[t._v("服务端收到 ACK 后立即关闭连接。")]),t._v(" "),e("li",[t._v("​"),e("strong",[t._v("作用​​：确保服务端收到最后的确认（防止 FIN 重传）。")])])])])]),t._v(" "),e("h4",{attrs:{id:"​为什么需要四次挥手-​​"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#​为什么需要四次挥手-​​"}},[t._v("#")]),t._v(" ​为什么需要四次挥手？​​")]),t._v(" "),e("ul",[e("li",[t._v("TCP 是全双工的，需分别关闭两个方向的连接：\n"),e("ul",[e("li",[t._v("客户端主动关闭发送方向（第一次挥手）。")]),t._v(" "),e("li",[t._v("服务端确认后关闭接收方向（第二次挥手）。")]),t._v(" "),e("li",[t._v("服务端再关闭自己的发送方向（第三次挥手）。")]),t._v(" "),e("li",[t._v("客户端确认后完全关闭（第四次挥手）")])])])]),t._v(" "),e("h4",{attrs:{id:"为什么握手是三次-挥手是四次-​​"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么握手是三次-挥手是四次-​​"}},[t._v("#")]),t._v(" 为什么握手是三次，挥手是四次？​​")]),t._v(" "),e("p",[t._v("握手时，服务端的 SYN 和 ACK 可以合并发送；"),e("br"),t._v("\n而挥手时，服务端可能还有未发送完的数据，需先发 ACK 再发 FIN。")]),t._v(" "),e("h2",{attrs:{id:"_5-http-状态码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-http-状态码"}},[t._v("#")]),t._v(" 5.http 状态码")]),t._v(" "),e("p",[t._v("200 OK 服务器成功处理了请求（这个是我们见到最多的）"),e("br"),t._v("\n301/302 Moved Permanently（重定向）请求的 URL 已移走。Response 中应该包含一个 Location URL, 说明资源现在所处的位置"),e("br"),t._v("\n404 Not Found(页面丢失)未找到资源"),e("br"),t._v("\n501 Internal Server Error 服务器遇到一个错误，使其无法对请求提供服务")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("1 开头：（被接受，需要继续处理。）"),e("br"),t._v("\n 100：客户端继续请求"),e("br"),t._v("\n 101：客户端切换协议")])]),t._v(" "),e("li",[e("p",[t._v("2 开头：（请求成功）"),e("br"),t._v("\n 200：请求成功"),e("br"),t._v("\n 202：服务器已接受请求，但尚未处理"),e("br"),t._v("\n 204：服务器成功处理了请求，但未返回内容")])]),t._v(" "),e("li",[e("p",[t._v("3 开头：（请求被重定向）"),e("br"),t._v("\n 301：(永久重定向)"),e("br"),t._v("\n 302： (临时重定向)"),e("br"),t._v("\n 303：http1.1 协议，禁止被缓存"),e("br"),t._v("\n 304：(协商缓存成功（资源未修改）的返回值)")])]),t._v(" "),e("li",[e("p",[t._v("4 开头：（客户端请求错误）"),e("br"),t._v("\n 400：客户端请求的语法错误，服务器无法理解"),e("br"),t._v("\n 403：服务器理解请求客户端的请求，但是拒绝执行此请求(一般客户端没有权限)"),e("br"),t._v("\n 404：服务器无法根据客户端的请求找到资源（网页）")])]),t._v(" "),e("li",[e("p",[t._v("5 开头：（服务器错误）")])])]),t._v(" "),e("h2",{attrs:{id:"_6-http-和-https-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-http-和-https-的区别"}},[t._v("#")]),t._v(" 6.http 和 https 的区别")]),t._v(" "),e("p",[t._v("http: 超文本传输协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从 WWW 服务器传输超文本到本地浏览器的传输协议"),e("br"),t._v("\nhttp 的默认端口：80"),e("br"),t._v("\nhttps 的默认端口：443"),e("br"),t._v("\nhttps 是在应用层(HTTP)和传输层(TCP)之间添加一个 SSL 的安全层")]),t._v(" "),e("h4",{attrs:{id:"https-的缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#https-的缺点"}},[t._v("#")]),t._v(" HTTPS 的缺点：")]),t._v(" "),e("p",[t._v(" （1）HTTPS 协议握手阶段比较费时，会使页面的加载时间延长近 50%，增加 10%到 20%的耗电"),e("br"),t._v("\n （2）HTTPS 连接缓存不如 HTTP 高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响"),e("br"),t._v("\n （3）SSL 证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。"),e("br"),t._v("\n （4）SSL 证书通常需要绑定 IP，不能在同一 IP 上绑定多个域名，IPv4 资源不可能支撑这个消耗")]),t._v(" "),e("h2",{attrs:{id:"_7-浏览器输入-url-发生了什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-浏览器输入-url-发生了什么"}},[t._v("#")]),t._v(" 7. 浏览器输入 url 发生了什么")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000006879700",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"总体来说分为以下几个过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总体来说分为以下几个过程"}},[t._v("#")]),t._v(" 总体来说分为以下几个过程:")]),t._v(" "),e("ul",[e("li",[t._v("DNS 解析")]),t._v(" "),e("li",[t._v("TCP 连接")]),t._v(" "),e("li",[t._v("发送 HTTP 请求")]),t._v(" "),e("li",[t._v("服务器处理请求并返回 HTTP 报文")]),t._v(" "),e("li",[t._v("浏览器解析渲染页面（浏览器渲染原理）")])]),t._v(" "),e("p",[t._v("HTML parser --\x3e DOM Tree"),e("br"),t._v("\n 标记化算法，进行元素状态的标记"),e("br"),t._v("\n dom 树构建"),e("br"),t._v("\nCSS parser --\x3e Style Tree"),e("br"),t._v("\n 解析 css 代码，生成样式树"),e("br"),t._v("\nattachment --\x3e Render Tree"),e("br"),t._v("\n 结合 dom 树 与 style 树，生成渲染树"),e("br"),t._v("\n layout: 布局"),e("br"),t._v("\n GPU painting: 像素绘制页面"),e("br"),t._v("\n 连接结束")]),t._v(" "),e("img",{attrs:{src:a(289)}}),t._v(" "),e("h4",{attrs:{id:"dns-解析-将域名解析成对应的-ip-地址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dns-解析-将域名解析成对应的-ip-地址"}},[t._v("#")]),t._v(" DNS 解析：将域名解析成对应的 IP 地址")]),t._v(" "),e("p",[t._v("①、查找浏览器自身缓存"),e("br"),t._v("\n②、查找操作系统(hosts 文件)"),e("br"),t._v("\n③、本地域名服务器"),e("br"),t._v("\n④、根域名服务器..")]),t._v(" "),e("h2",{attrs:{id:"_8-正向代理和反向代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-正向代理和反向代理"}},[t._v("#")]),t._v(" 8. 正向代理和反向代理")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.cnblogs.com/taostaryu/p/10547132.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"正向代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正向代理"}},[t._v("#")]),t._v(" 正向代理：")]),t._v(" "),e("p",[t._v(" 正向代理类似一个跳板机，代理访问外部资源"),e("br"),t._v("\n 比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了")]),t._v(" "),e("p",[e("img",{attrs:{src:a(290)}})]),t._v(" "),e("p",[e("strong",[t._v("正向代理的用途：")]),e("br"),t._v("\n 1、访问原来无法访问的资源，如google"),e("br"),t._v("\n 2、可以做缓存，加速访问资源"),e("br"),t._v("\n 3、对客户端访问授权，上网进行认证"),e("br"),t._v("\n 4、代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息")]),t._v(" "),e("h4",{attrs:{id:"反向代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[t._v("#")]),t._v(" 反向代理：")]),t._v(" "),e("p",[t._v(" 反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，"),e("br"),t._v("\n 然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器")]),t._v(" "),e("p",[e("img",{attrs:{src:a(291)}})]),t._v(" "),e("p",[e("strong",[t._v("反向代理的作用：")]),e("br"),t._v("\n 1、保证内网的安全，阻止web攻击，大型网站，通常将反向代理作为公网访问地址，Web服务器是内网"),e("br"),t._v("\n 2、负载均衡，通过反向代理服务器来优化网站的负载")]),t._v(" "),e("p",[e("strong",[t._v("总结：")]),e("br"),t._v("\n 正向代理即是客户端代理, 代理客户端, 服务端不知道实际发起请求的客户端."),e("br"),t._v("\n 反向代理即是服务端代理, 代理服务端, 客户端不知道实际提供服务的服务端")]),t._v(" "),e("p",[t._v(" 正向代理: 买票的黄牛"),e("br"),t._v("\n 反向代理: 租房的代理")]),t._v(" "),e("h2",{attrs:{id:"_9-websocket-协议详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-websocket-协议详解"}},[t._v("#")]),t._v(" 9. WebSocket 协议详解")]),t._v(" "),e("p",[t._v("WebSocket 是一种在 单个 TCP 连接 上进行 全双工通信 的协议，旨在解决 HTTP 协议在实时通信中的局限性。")]),t._v(" "),e("h4",{attrs:{id:"websocket-的握手过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket-的握手过程"}},[t._v("#")]),t._v(" WebSocket 的握手过程")]),t._v(" "),e("ul",[e("li",[e("ol",[e("li",[t._v("客户端发起 HTTP 升级请求")])])])]),t._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token request-line"}},[e("span",{pre:!0,attrs:{class:"token method property"}},[t._v("GET")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token request-target url"}},[t._v("/chat")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token http-version property"}},[t._v("HTTP/1.1")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("example.com")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Upgrade")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("websocket")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Connection")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("Upgrade")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Sec-WebSocket-Key")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("dGhlIHNhbXBsZSBub25jZQ==")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Sec-WebSocket-Version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("13")])]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("ul",[e("li",[e("code",[t._v("Upgrade: websocket")]),t._v(" 表示希望升级到 WebSocket 协议。")]),t._v(" "),e("li",[e("code",[t._v("Sec-WebSocket-Key")]),t._v(" 是一个随机生成的 Base64 字符串，用于安全验证。")])]),t._v(" "),e("ul",[e("li",[e("ol",{attrs:{start:"2"}},[e("li",[t._v("服务器响应确认升级")])])])]),t._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token response-status"}},[e("span",{pre:!0,attrs:{class:"token http-version property"}},[t._v("HTTP/1.1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token status-code number"}},[t._v("101")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token reason-phrase string"}},[t._v("Switching Protocols")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Upgrade")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("websocket")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Connection")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("Upgrade")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Sec-WebSocket-Accept")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("s3pPLMBiTxaQ9kYGzzhZRbK+xOo=")])]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("ul",[e("li",[e("code",[t._v("101 Switching Protocols")]),t._v(" 表示协议升级成功。")]),t._v(" "),e("li",[e("code",[t._v("Sec-WebSocket-Accept")]),t._v(" 是服务器对客户端 "),e("code",[t._v("Sec-WebSocket-Key")]),t._v(" 的计算结果，用于验证握手合法性。")])]),t._v(" "),e("h2",{attrs:{id:"_10-http-版本-以及-http1-1和http2-0的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-http-版本-以及-http1-1和http2-0的区别"}},[t._v("#")]),t._v(" 10.HTTP 版本 以及 http1.1和http2.0的区别")]),t._v(" "),e("h4",{attrs:{id:"​​http-版本演进​"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#​​http-版本演进​"}},[t._v("#")]),t._v(" ​​HTTP 版本演进​")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("版本")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("发布时间")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("核心改进​")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("HTTP/0.9")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1991")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("仅支持 GET 方法，无头部，纯文本")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("HTTP/1.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1996")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("引入头部、状态码、多方法（POST等）")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("​​HTTP/1.1​")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1997")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("持久连接、管道化、缓存优化")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("​HTTP/2​")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2015")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("二进制协议、多路复用、头部压缩")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("HTTP/3​")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2022")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("基于 QUIC（UDP），解决队头阻塞")])])])]),t._v(" "),e("h4",{attrs:{id:"http-1-1-与-http-2-核心区别​"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1-与-http-2-核心区别​"}},[t._v("#")]),t._v(" HTTP/1.1 与 HTTP/2 核心区别​")]),t._v(" "),e("ul",[e("li",[e("ol",[e("li",[t._v("传输方式")])])])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("特性")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("HTTP/1.1")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("HTTP/2")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("数据格式​​")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("文本格式（明文）")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("二进制帧（Frame）")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("连接复用​")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("需多个 TCP 连接（6-8个并行限制）")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("单连接多路复用（Stream 并行）")])])])]),t._v(" "),e("ul",[e("li",[e("ol",{attrs:{start:"2"}},[e("li",[t._v("性能优化​")])])])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("特性")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("HTTP/1.1")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("HTTP/2")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("​​队头阻塞（HOL）​")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("存在（管道化未彻底解决）")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("彻底解决（Stream 独立处理）")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("头部压缩​")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("重复发送完整头部")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("HPACK 压缩（减少 90% 头部体积）")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("​​服务器推送​")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不支持")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("可主动推送资源（如 CSS/JS）")])])])]),t._v(" "),e("p",[t._v("​​现代浏览器​​：默认支持 HTTP/2（需 HTTPS）。")]),t._v(" "),e("h4",{attrs:{id:"多路复用-multiplexing-​"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多路复用-multiplexing-​"}},[t._v("#")]),t._v(" 多路复用（Multiplexing）​")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// HTTP/1.1：顺序请求（队头阻塞）")]),t._v("\n请求"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" → 响应"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" → 请求"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" → 响应"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// HTTP/2：并行处理")]),t._v("\n请求"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" → 响应"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n请求"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" → 响应"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" （同一连接）\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])])])}),[],!1,null,null,null);e.default=r.exports}}]);